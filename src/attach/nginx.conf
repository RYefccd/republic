
#user  nobody;
worker_processes  auto;

error_log  logs/error.log debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
# nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx 进程数相除，但是nginx 分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致
worker_rlimit_nofile 65535;

events {
    worker_connections  1024;
    use epoll;
    multi_accept on;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    resolver 8.8.8.8 114.114.114.114;  # Google 的公共 DNS 服务器

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    lua_shared_dict logconf 12k;
    lua_shared_dict gtmeta 10m;
    lua_shared_dict gttest 10m;
    lua_shared_dict redis_cluster_slot_locks 100k;
    init_by_lua_block {
        logger = require("gtlib.gtlog")
        local log_conf = {
            switch = true, -- 日志开关
            level = "debug", -- 日志开关
            host = "127.0.0.12", -- syslog host
            port = 514, -- syslog port
            sock_type = "udp", -- syslog type udp/tcp
        }
        logger.init(log_conf)
        local handle = io.popen("pwd")
        local result = handle:read("*a")
        handle:close()
        ngx.log(ngx.ERR, "pwd: ", result)
        inspect = require("inspect")
        gtprotect = require("gtlib.gtprotect") -- 可以在后面的模块应用 gtprotect 实例对象, 里面可以包含方法.
        gtredis = require("gtlib.gtredis")
        gttest = require("gtlib.gttest") -- 测试计时模块
        gtprotect.load_defaults("9dh8s4.cjn.html")  -- 传入一个缺省的 9dh8s4.cjn.html 注入文件.
        -- init redis
        local redis_conf = {
            cluster_mode = false,  -- 是否集群模式
            host = '127.0.0.1',  -- 连接地址
            port = 6379,  -- 端口
            timeout = 1000,  -- 超时时间
            max_idle_time = 100,  -- 连接池连接最大空闲(idle)时间.
            conn_pool_size = 10000,  -- 连接池最大连接个数
            -- passwd = "123qwe"
        }
        -- local redis_conf = {
        --     cluster_mode = true,  -- 是否集群模式
        --     serv_list = {
        --         { ip = "127.0.0.1", port = 7001 },
        --         { ip = "127.0.0.1", port = 7002 },
        --         { ip = "127.0.0.1", port = 7003 },
        --         { ip = "127.0.0.1", port = 7004 },
        --         { ip = "127.0.0.1", port = 7005 },
        --         { ip = "127.0.0.1", port = 7006 }
        --     },
        --     timeout = 1000,  -- 超时时间
        --     max_idle_time = 100,  -- 连接池连接最大空闲(idle)时间.
        --     conn_pool_size = 10000,  -- 连接池最大连接个数
        --     passwd = '123qwe'  -- 鉴权passwd
        -- }
        gtredis.init_conf(redis_conf)
        -- 设置下游风控接口.如果打开开关, 会把cookie校验信息发送至此 endpoint.
        gtprotect.set_risk_endpoint("http://127.0.0.1:81/risk_endpoint")
    }
    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        
        location /api_control{
            access_by_lua_block{
                gtprotect.auth_api()
            }
            content_by_lua_block {
                gtprotect.dispatch_api()
            }
        }
                          
        # http://10.145.186.102/demo
        location /debugdemo {
            root   html;
            # index  index.html index.htm
            index goods.html;
            # proxy_pass http://127.0.0.1:$server_port/; 
            access_by_lua_block {
                ngx.ctx.is_debug = true
                gtprotect.process()
            }
            content_by_lua_block {
                gtprotect.get_test_json_info()
            }
        }
       # http://10.145.186.102/demo
        location /demo {
            # root   html;
            # # # index  index.html index.htm
            # index goods.html;
            # proxy_pass http://127.0.0.1:$server_port/; 
            proxy_pass http://127.0.0.1:81/demo;

            access_by_lua_block {
                ngx.ctx.is_debug = false
                gtprotect.process()
            }
            # log_by_lua_block{
            #     ngx.ctx.is_debug = false
            #     gtprotect.log_risk_info()
            # }
        }
         # ##########################################
        # 在此处增加测试的接口，测试出lua代码的执行效率
        # ##########################################
        location /test_demo {
            default_type text/html;
            content_by_lua_block {
                
                gttest.process()
                ngx.say("ok")
            }
        }
        # ##########################################
        # 取数据
        location /test_get {
            content_by_lua_block {
                gttest.test_init_get()
            }
        }
        # ##########################################
        # 初始化数据
        location /test_clear {
            content_by_lua_block {
                gttest.test_init_clear()
            }
        }
        # ##########################################
        # 压测时,从这个接口获取一个cookie
        location /test/get_cookies {
            default_type 'text/html';  
            access_by_lua_block {
                ngx.say("hello world")
            }
        }
        # ##########################################
        # 分阶段测试1,221125.24
        location /test/s1 {
            default_type text/html;
            add_header Content-Type 'text/html; charset=utf-8';
            return 200  "hello world";
        }
        # 分阶段测试2
        location /test/s2 {
             default_type 'text/html';
             add_header Content-Type 'text/html; charset=utf-8';
             content_by_lua 'hello world';
        }
        # 分阶段测试3
        location /test/s3 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8'; 
            access_by_lua_block {
                ngx.say("hello world")
            }
        }
        # 分阶段测试打10行日志
        location /test/s4_1 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            # 循环十次打印日志
            access_by_lua_block {
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.say("hello world")
            }
        }
        location /test/s4_2 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            # 循环十次打印日志
            access_by_lua_block {
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" .. )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:")
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.say("hello world")
            }
        }

        location /test/s4_3 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            # 循环十次打印日志
            access_by_lua_block {
                local i=0
                while  i<10
                do
                    ngx.log(ngx.ERR, "access_by_lua_block:" .. tostring(i))
                    i=i+1
                end
                ngx.say("hello world")
            }
        }

        # 分阶段测试md5测试
        # 获取一个时间，然后对时间进行md5的测试
        location /test/s5 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            access_by_lua_block {
                # ngx.update_time()
                # local et_t = ngx.now()*1000
                # local et_string = tostring(et_t)
                local et_string ="0"
                local et_string_md5 = ngx.md5(et_string)
                # ngx.log(ngx.ERR, "et_string_md5:" .. et_string_md5)
                ngx.say("hello world")
            }
        }
        # 获取一个时间，然后对时间进行md5的测试
        location /test/s6 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            access_by_lua_block {
                local resty_md5 = require "resty.md5"
                local str = require "resty.string"

                local md5 = resty_md5:new()
                local ok = md5:update("hel")
                local digest = md5:final()
                str.to_hex(digest)

                ngx.say("hello world")
            }
        }

        location /test/s7 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            access_by_lua_block {
                inspect(ngx)
                ngx.say("hello world")
            }
        }


        # 这个接口获取一个不转发到81
        location /test/demov2 {
            default_type 'text/html'; 
            add_header Content-Type 'text/html; charset=utf-8';
            access_by_lua_block {
                ngx.ctx.is_debug = false
                gtprotect.process()
                ngx.say("hello world")
            }
        }
        # ##########################################
        location / {
            root   html;
            index  index.html index.htm;
        }
        }
        location /lua {
            default_type text/html;
            content_by_lua_block {
                ngx.header.content_type = 'text/plain; charset=utf-8'
                ngx.say("================================================================================")
                ngx.say("package.path: ")
                ngx.say(package.path)
                ngx.say("================================================================================")
                ngx.say("package.loaded: ")
                ngx.say(inspect(package.loaded))
                ngx.say("================================================================================")
                ngx.say("module ngx: ")
                ngx.say(inspect(ngx))
            }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    server {
        # 模拟真实的 backend 服务器.
        listen       81;
        server_name  localhost;

        #charset koi8-r;
        #access_log  logs/host.access.log  main;
        location /demo {
            # root   html;
            # # # index  index.html index.htm
            # index goods.html;
            # proxy_pass http://127.0.0.1:$server_port/;
            # 把请求头返回, 可以看到 x-gtprotect-data 就是往风控服务传递的保护校验参数.
            content_by_lua_block {
                local h, err = ngx.req.get_headers()
                local t = {}
                t["request_headers"] = h
                t["uri"] = ngx.var.uri
                ngx.header.content_type = 'text/plain; charset=utf-8'
                ngx.say(gtprotect.json.encode(t))
            }
        }
        location /risk_endpoint {
            default_type text/html;
            content_by_lua_block {
                ngx.header.content_type = 'text/plain; charset=utf-8'
                ngx.say("================================================================================")
                ngx.say("package.path: ")
                ngx.say(package.path)
                ngx.say("================================================================================")
                ngx.say("package.loaded: ")
                ngx.say(inspect(package.loaded))
                ngx.say("================================================================================")
                -- ngx.say("module ngx: ")
                -- ngx.say(inspect(ngx))
                ngx.req.read_body()
                local request_body = ngx.req.get_body_data()
                ngx.say(request_body)
                ngx.log(ngx.ERR, "risk_endpoint: ", request_body)
            }
        }
        location / {
            root   html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
