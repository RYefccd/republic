
#user  nobody;
worker_processes auto;

error_log logs/error.log debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
# nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx 进程数相除，但是nginx 分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致
worker_rlimit_nofile 65535;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}


http {
    include mime.types;
    default_type application/octet-stream;
    resolver 8.8.8.8 114.114.114.114; # Google 的公共 DNS 服务器
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    access_log logs/access.log;
    sendfile on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout 65;
    #gzip  on;
    server {
        listen 80;
        server_name localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        # ##########################################
        # 在此处增加测试的接口，测试出lua代码的执行效率
        # ##########################################
        # 分阶段测试1,221125.24
        location /test/s1 {
            default_type text/html;
            add_header Content-Type 'text/html; charset=utf-8';
            return 200 "hello world";
        }
        # 分阶段测试2
        location /test/s2 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            content_by_lua 'hello world';
        }
        # 分阶段测试3
        location /test/s3 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            access_by_lua_block {
                ngx.say("hello world")
            }
        }
        # 分阶段测试打10行日志
        location /test/s4_1 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            # 循环十次打印日志
            access_by_lua_block {
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.say("hello world")
            }
        }
        location /test/s4_2 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            # 循环十次打印日志
            access_by_lua_block {
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" .. )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.log(ngx.ERR, "access_by_lua_block:")
                ngx.log(ngx.ERR, "access_by_lua_block:" )
                ngx.say("hello world")
            }
        }

        location /test/s4_3 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            # 循环十次打印日志
            access_by_lua_block {
                local i=0
                while i<10
                do
                ngx.log(ngx.ERR, "access_by_lua_block:" .. tostring(i))
                i=i+1
                end
                ngx.say("hello world")
            }
        }

        # 分阶段测试md5测试
        # 获取一个时间，然后对时间进行md5的测试
        location /test/s5 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            access_by_lua_block {
                # ngx.update_time()
                # local et_t = ngx.now()*1000
                # local et_string = tostring(et_t)
                local et_string ="0"
                local et_string_md5 = ngx.md5(et_string)
                # ngx.log(ngx.ERR, "et_string_md5:" .. et_string_md5)
                ngx.say("hello world")
            }
        }
        # 获取一个时间，然后对时间进行md5的测试
        location /test/s6 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            access_by_lua_block {
                local resty_md5 = require "resty.md5"
                local str = require "resty.string"

                local md5 = resty_md5:new()
                local ok = md5:update("hel")
                local digest = md5:final()
                str.to_hex(digest)

                ngx.say("hello world")
            }
        }

        location /test/s7 {
            default_type 'text/html';
            add_header Content-Type 'text/html; charset=utf-8';
            access_by_lua_block {
                inspect(ngx)
                ngx.say("hello world")
            }
        }


        # ##########################################
        location / {
            root html;
            index index.html index.htm;
        }
    }
    # ##########################################
}
