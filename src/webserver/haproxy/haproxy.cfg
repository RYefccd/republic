global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon
	tune.bufsize 2097152  # 2MB

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
	timeout connect 5000
	timeout client  50000
	timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend fe_api
    bind :88
    
    use_backend rate_10s   if { path /rate_10s }  #### \{ 与 path 之间要空格, uri 与 \} 之间也要保空格
    use_backend rate_1m    if { path /rate_1m  }
    use_backend rate_5m    if { path /rate_5m  }
    use_backend rate_1h    if { path /rate_1h  }
    use_backend rate_1d    if { path /rate_1d  }
    use_backend rate_7d    if { path /rate_7d  }

    use_backend rolling_sum10s if { path /rolling_sum10s }

    use_backend group_distinct_1m  if { path /group_distinct_1m }
    use_backend group_distinct_5m  if { path /group_distinct_5m }
    use_backend group_distinct_1h  if { path /group_distinct_1h }
    use_backend group_distinct_1d  if { path /group_distinct_1d }
    use_backend group_distinct_7d  if { path /group_distinct_7d }
    
    default_backend default_be

backend default_be
    http-request return status 200 content-type text/html              file /etc/haproxy/sw_openapi/sw_func.html if { path / }  # openapi entrypoint html
    http-request return status 200 content-type text/css               file /etc/haproxy/sw_openapi/swagger-ui/5.0.0/swagger-ui.min.css if { path_end swagger-ui.min.css }
    http-request return status 200 content-type application/javascript file /etc/haproxy/sw_openapi/swagger-ui/5.0.0/swagger-ui-bundle.min.js  if { path_end swagger-ui-bundle.min.js }
    http-request return status 200 content-type application/json       file /etc/haproxy/sw_openapi/sw_func.json if { path_end sw_func.json }
    http-request return status 200 content-type application/json lf-string '{"ip": "%[src]","port": %cp,"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]", "timestamp":"%[date]"}' hdr Access-Control-Allow-Origin "*" if { path /inspect  }


backend rate_10s
    stick-table type binary len 16 size 1g expire 10s store gpc0,gpc0_rate(10s),gpc1,gpc1_rate(10s)
    acl is_post method POST
    
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.
    # http-request set-var(txn.mykey) url_param(mykey)

    http-request set-var(txn.v) url_param(mykey) unless { url_param(v) -m found } # distinct --> aggregate_key
    http-request set-var(txn.v) url_param(v) if { url_param(v) -m found }
    http-request set-var(txn._v) var(txn.v),digest(md5)
    http-request set-var(txn.vttl) var(txn._v),table_expire
    http-request set-var(txn.vttl) int(0) unless { var(txn.vttl) -m found }   ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.vidle) var(txn._v),table_idle
    http-request set-var(txn.vidle) int(0) unless { var(txn.vidle) -m found }  ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    # stick-table  type string  size 1g  expire 30s  store gpc0,gpc0_rate(10s),gpc1,gpc1_rate(10s)
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 
    http-request track-sc0 var(txn._v) if is_post  # track-sc0 会刷新 idle 和 ttl 的值.
    http-request sc-inc-gpc0(0) if is_post  # sc-inc-xxx 对键对应的值进行累加
    http-request set-var(txn.counter) var(txn._v),table_gpc0
    http-request set-var(txn.counter) int(0) unless { var(txn.counter) -m found }
    http-request set-var(txn.rate) var(txn._v),table_gpc0_rate
    http-request set-var(txn.rate) int(0) unless { var(txn.rate) -m found }
    http-request return status 200 content-type application/json lf-string '{"counter":%[var(txn.rate)],"v":"%[var(txn.v)]","idle":%[var(txn.vidle)],"ttl":%[var(txn.vttl)],"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]","timestamp":"%[date]","ip": "%[src]","port": %cp}' hdr Access-Control-Allow-Origin "*"


backend rate_1m
    stick-table type binary len 16 size 1g expire 1m store gpc0,gpc0_rate(1m),gpc1,gpc1_rate(1m)
    acl is_post method POST
    
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.

    http-request set-var(txn.v) url_param(mykey) unless { url_param(v) -m found } # distinct --> aggregate_key
    http-request set-var(txn.v) url_param(v) if { url_param(v) -m found }
    http-request set-var(txn._v) var(txn.v),digest(md5)
    http-request set-var(txn.vttl) var(txn._v),table_expire
    http-request set-var(txn.vttl) int(0) unless { var(txn.vttl) -m found }   ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.vidle) var(txn._v),table_idle
    http-request set-var(txn.vidle) int(0) unless { var(txn.vidle) -m found }  ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    # stick-table  type string  size 1g  expire 30s  store gpc0,gpc0_rate(10s),gpc1,gpc1_rate(10s)
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 
    http-request track-sc0 var(txn._v) if is_post  # track-sc0 会刷新 idle 和 ttl 的值.
    http-request sc-inc-gpc0(0) if is_post  # sc-inc-xxx 对键对应的值进行累加
    http-request set-var(txn.counter) var(txn._v),table_gpc0
    http-request set-var(txn.counter) int(0) unless { var(txn.counter) -m found }
    http-request set-var(txn.rate) var(txn._v),table_gpc0_rate
    http-request set-var(txn.rate) int(0) unless { var(txn.rate) -m found }
    http-request return status 200 content-type application/json lf-string '{"counter":%[var(txn.rate)],"v":"%[var(txn.v)]","idle":%[var(txn.vidle)],"ttl":%[var(txn.vttl)],"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]","timestamp":"%[date]","ip": "%[src]","port": %cp}' hdr Access-Control-Allow-Origin "*"


backend rate_5m
    stick-table type binary len 16 size 1g expire 5m store gpc0,gpc0_rate(5m),gpc1,gpc1_rate(5m)
    acl is_post method POST
    
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.

    http-request set-var(txn.v) url_param(mykey) unless { url_param(v) -m found } # distinct --> aggregate_key
    http-request set-var(txn.v) url_param(v) if { url_param(v) -m found }
    http-request set-var(txn._v) var(txn.v),digest(md5)
    http-request set-var(txn.vttl) var(txn._v),table_expire
    http-request set-var(txn.vttl) int(0) unless { var(txn.vttl) -m found }   ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.vidle) var(txn._v),table_idle
    http-request set-var(txn.vidle) int(0) unless { var(txn.vidle) -m found }  ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    # stick-table  type string  size 1g  expire 30s  store gpc0,gpc0_rate(10s),gpc1,gpc1_rate(10s)
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 
    http-request track-sc0 var(txn._v) if is_post  # track-sc0 会刷新 idle 和 ttl 的值.
    http-request sc-inc-gpc0(0) if is_post  # sc-inc-xxx 对键对应的值进行累加
    http-request set-var(txn.counter) var(txn._v),table_gpc0
    http-request set-var(txn.counter) int(0) unless { var(txn.counter) -m found }
    http-request set-var(txn.rate) var(txn._v),table_gpc0_rate
    http-request set-var(txn.rate) int(0) unless { var(txn.rate) -m found }
    http-request return status 200 content-type application/json lf-string '{"counter":%[var(txn.rate)],"v":"%[var(txn.v)]","idle":%[var(txn.vidle)],"ttl":%[var(txn.vttl)],"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]","timestamp":"%[date]","ip": "%[src]","port": %cp}' hdr Access-Control-Allow-Origin "*"



backend rate_1h
    stick-table type binary len 16 size 1g expire 1h store gpc0,gpc0_rate(1h),gpc1,gpc1_rate(1h)
    acl is_post method POST
    
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.

    http-request set-var(txn.v) url_param(mykey) unless { url_param(v) -m found } # distinct --> aggregate_key
    http-request set-var(txn.v) url_param(v) if { url_param(v) -m found }
    http-request set-var(txn._v) var(txn.v),digest(md5)
    http-request set-var(txn.vttl) var(txn._v),table_expire
    http-request set-var(txn.vttl) int(0) unless { var(txn.vttl) -m found }   ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.vidle) var(txn._v),table_idle
    http-request set-var(txn.vidle) int(0) unless { var(txn.vidle) -m found }  ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    # stick-table  type string  size 1g  expire 30s  store gpc0,gpc0_rate(10s),gpc1,gpc1_rate(10s)
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 
    http-request track-sc0 var(txn._v) if is_post  # track-sc0 会刷新 idle 和 ttl 的值.
    http-request sc-inc-gpc0(0) if is_post  # sc-inc-xxx 对键对应的值进行累加
    http-request set-var(txn.counter) var(txn._v),table_gpc0
    http-request set-var(txn.counter) int(0) unless { var(txn.counter) -m found }
    http-request set-var(txn.rate) var(txn._v),table_gpc0_rate
    http-request set-var(txn.rate) int(0) unless { var(txn.rate) -m found }
    http-request return status 200 content-type application/json lf-string '{"counter":%[var(txn.rate)],"v":"%[var(txn.v)]","idle":%[var(txn.vidle)],"ttl":%[var(txn.vttl)],"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]","timestamp":"%[date]","ip": "%[src]","port": %cp}' hdr Access-Control-Allow-Origin "*"


backend rate_1d
    stick-table type binary len 16 size 1g expire 1d store gpc0,gpc0_rate(1d),gpc1,gpc1_rate(1d)
    acl is_post method POST
    
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.

    http-request set-var(txn.v) url_param(mykey) unless { url_param(v) -m found } # distinct --> aggregate_key
    http-request set-var(txn.v) url_param(v) if { url_param(v) -m found }
    http-request set-var(txn._v) var(txn.v),digest(md5)
    http-request set-var(txn.vttl) var(txn._v),table_expire
    http-request set-var(txn.vttl) int(0) unless { var(txn.vttl) -m found }   ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.vidle) var(txn._v),table_idle
    http-request set-var(txn.vidle) int(0) unless { var(txn.vidle) -m found }  ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    # stick-table  type string  size 1g  expire 30s  store gpc0,gpc0_rate(10s),gpc1,gpc1_rate(10s)
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 
    http-request track-sc0 var(txn._v) if is_post  # track-sc0 会刷新 idle 和 ttl 的值.
    http-request sc-inc-gpc0(0) if is_post  # sc-inc-xxx 对键对应的值进行累加
    http-request set-var(txn.counter) var(txn._v),table_gpc0
    http-request set-var(txn.counter) int(0) unless { var(txn.counter) -m found }
    http-request set-var(txn.rate) var(txn._v),table_gpc0_rate
    http-request set-var(txn.rate) int(0) unless { var(txn.rate) -m found }
    http-request return status 200 content-type application/json lf-string '{"counter":%[var(txn.rate)],"v":"%[var(txn.v)]","idle":%[var(txn.vidle)],"ttl":%[var(txn.vttl)],"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]","timestamp":"%[date]","ip": "%[src]","port": %cp}' hdr Access-Control-Allow-Origin "*"


backend rate_7d
    stick-table type binary len 16 size 1g expire 7d store gpc0,gpc0_rate(7d),gpc1,gpc1_rate(7d)
    acl is_post method POST
    
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.

    http-request set-var(txn.v) url_param(mykey) unless { url_param(v) -m found } # distinct --> aggregate_key
    http-request set-var(txn.v) url_param(v) if { url_param(v) -m found }
    http-request set-var(txn._v) var(txn.v),digest(md5)
    http-request set-var(txn.vttl) var(txn._v),table_expire
    http-request set-var(txn.vttl) int(0) unless { var(txn.vttl) -m found }   ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.vidle) var(txn._v),table_idle
    http-request set-var(txn.vidle) int(0) unless { var(txn.vidle) -m found }  ## 如果前面没有设置 txn.vttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    # stick-table  type string  size 1g  expire 30s  store gpc0,gpc0_rate(10s),gpc1,gpc1_rate(10s)
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 
    http-request track-sc0 var(txn._v) if is_post  # track-sc0 会刷新 idle 和 ttl 的值.
    http-request sc-inc-gpc0(0) if is_post  # sc-inc-xxx 对键对应的值进行累加
    http-request set-var(txn.counter) var(txn._v),table_gpc0
    http-request set-var(txn.counter) int(0) unless { var(txn.counter) -m found }
    http-request set-var(txn.rate) var(txn._v),table_gpc0_rate
    http-request set-var(txn.rate) int(0) unless { var(txn.rate) -m found }
    http-request return status 200 content-type application/json lf-string '{"counter":%[var(txn.rate)],"v":"%[var(txn.v)]","idle":%[var(txn.vidle)],"ttl":%[var(txn.vttl)],"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]","timestamp":"%[date]","ip": "%[src]","port": %cp}' hdr Access-Control-Allow-Origin "*"


backend rolling_sum10s
    stick-table type binary len 16 size 1g expire 20s store gpc(1),gpc_rate(1,20s)   # ,gpc1,gpc1_rate(10s)
    acl is_post method POST

    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.

    http-request set-var(txn.key) url_param(key)
    http-request set-var(txn.num) url_param(num)
    http-request set-var(txn._key) var(txn.key),digest(md5)
    http-request set-var(txn.keyttl) var(txn._key),table_expire
    http-request set-var(txn.keyttl) int(0) unless { var(txn.keyttl) -m found }   ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.keyidle) var(txn._key),table_idle
    http-request set-var(txn.keyidle) int(0) unless { var(txn.keyidle) -m found }  ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    # stick-table  type string  size 1g  expire 30s  store gpc0,gpc0_rate(10s),gpc1,gpc1_rate(10s)
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 
    http-request track-sc0 var(txn._key) if is_post  # track-sc0 会刷新 idle 和 ttl 的值.
    #http-request sc-inc-gpc0(0) if is_post  # sc-inc-xxx 对键对应的值进行累加
    http-request sc-add-gpc(0,0) var(txn.num)  if is_post  # var(txn.num)  # int(10)
    http-request set-var(txn.counter) var(txn._key),table_gpc(0,)    # table_gpc0
    http-request set-var(txn.counter) int(0) unless { var(txn.counter) -m found }
    http-request set-var(txn.rate) var(txn._key),table_gpc_rate(0,)
    http-request set-var(txn.rate) int(0) unless { var(txn.rate) -m found }
    http-request return status 200 content-type application/json lf-string '{"counter":%[var(txn.rate)],"key":"%[var(txn.key)]","ttl":%[var(txn.keyttl)],"idle":%[var(txn.keyidle)],"ip": "%[src]","port": %cp,"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]", "timestamp":"%[date]"}' hdr Access-Control-Allow-Origin "*"


backend group_distinct_1m
    stick-table type binary len 16 size 1g expire 1m store gpc0,gpc0_rate(1m),gpc1,gpc1_rate(1m)
    acl is_post method POST
    
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.
    # 定义变量
    http-request set-var(txn.group) url_param(group)  # group   --> group 
    http-request set-var(txn.v) url_param(distinct) unless { url_param(v) -m found } # distinct --> aggregate_key
    http-request set-var(txn.v) url_param(v) if { url_param(v) -m found }  # distinct --> aggregate_key
    # http-request set-var-fmt(txn.combine_key) "%[var(txn.group)]%[var(txn.v)]"
    http-request set-var(txn.combine_key) var(txn.group),concat(':',txn.v,)  # 避免 v 为空值或者不传入分组待观测值时导致 combine_key 和 key 一样，进而重复计数.
    # str(1),digest(md5),hex  #  str(),concat(<ip=,sess.ip,>),concat(<dn=,sess.dn,>)
    http-request set-var(txn._combine_key) var(txn.combine_key),digest(md5)
    http-request set-var(txn._group) var(txn.group),digest(md5)
    http-request set-var(txn._v) var(txn.v),digest(md5)

    http-request set-var(txn.gttl)  var(txn._group),table_expire
    http-request set-var(txn.gttl)  int(0) unless { var(txn.gttl) -m found }   ## 如果前面没有设置 txn.gttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.gidle) var(txn._group),table_idle
    http-request set-var(txn.gidle) int(0) unless { var(txn.gidle) -m found }  ## 如果前面没有设置 txn.gttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.vidle) var(txn._combine_key),table_idle
    http-request set-var(txn.vidle) int(0) unless { var(txn.vidle) -m found }
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 

    http-request track-sc0 var(txn._group)  if is_post  # track-scx 会刷新 idle 和 ttl 的值.
    http-request track-sc1 var(txn._combine_key)  if is_post  # track-scx 会刷新 idle 和 ttl 的值.
    # 先取出 table 中 txn.combine_key 的速率, 如果最近窗口速率等于0说明txn.combine_key是第一次出现. 然后再去完成 txn.combine_key 值的累计.
    http-request sc-inc-gpc1(0) if is_post { var(txn._combine_key),table_gpc0_rate eq 0 }  # 对 group:aggregate_key 这个复合键如果是第一次出现, 那么在gpc1中对group的进行自增(UV的概念).
    http-request sc-inc-gpc0(0) if is_post ## 在 gpc0 中对 group 的进行累计(PV的概念)
    http-request sc-inc-gpc0(1) if is_post ## 对 track-sc1 中的 group:aggregate_key 在 gpc0 中进行计数(PV) 

    http-request set-var(txn.gpv)  var(txn._group),table_gpc0_rate
    http-request set-var(txn.uv)  var(txn._group),table_gpc1_rate
    http-request set-var(txn.pv) var(txn._combine_key),table_gpc0_rate

    http-request return status 200 content-type application/json lf-string '{"gpv":%[var(txn.gpv)],"pv":%[var(txn.pv)],"uv":%[var(txn.uv)],"gidle":%[var(txn.gidle)],"vidle":%[var(txn.vidle)],"group":"%[var(txn.group)]","v":"%[var(txn.v)]","ttl":%[var(txn.gttl)],"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]","timestamp":"%[date]","ip": "%[src]","port": %cp}' hdr Access-Control-Allow-Origin "*"


backend group_distinct_5m
    stick-table type binary len 16 size 1g expire 5m store gpc0,gpc0_rate(5m),gpc1,gpc1_rate(5m)   
    acl is_post method POST
    
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.
    # 定义变量
    http-request set-var(txn.group) url_param(group)  # group   --> group 
    http-request set-var(txn.v) url_param(distinct) unless { url_param(v) -m found } # distinct --> aggregate_key
    http-request set-var(txn.v) url_param(v) if { url_param(v) -m found }  # distinct --> aggregate_key
    # http-request set-var-fmt(txn.combine_key) "%[var(txn.group)]%[var(txn.v)]"
    http-request set-var(txn.combine_key) var(txn.group),concat(':',txn.v,)  # 避免 v 为空值或者不传入分组待观测值时导致 combine_key 和 key 一样，进而重复计数.
    # str(1),digest(md5),hex  #  str(),concat(<ip=,sess.ip,>),concat(<dn=,sess.dn,>)
    http-request set-var(txn._combine_key) var(txn.combine_key),digest(md5)
    http-request set-var(txn._group) var(txn.group),digest(md5)
    http-request set-var(txn._v) var(txn.v),digest(md5)

    http-request set-var(txn.gttl)  var(txn._group),table_expire
    http-request set-var(txn.gttl)  int(0) unless { var(txn.gttl) -m found }   ## 如果前面没有设置 txn.gttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.gidle) var(txn._group),table_idle
    http-request set-var(txn.gidle) int(0) unless { var(txn.gidle) -m found }  ## 如果前面没有设置 txn.gttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.vidle) var(txn._combine_key),table_idle
    http-request set-var(txn.vidle) int(0) unless { var(txn.vidle) -m found }
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 

    http-request track-sc0 var(txn._group)  if is_post  # track-scx 会刷新 idle 和 ttl 的值.
    http-request track-sc1 var(txn._combine_key)  if is_post  # track-scx 会刷新 idle 和 ttl 的值.
    # 先取出 table 中 txn.combine_key 的速率, 如果最近窗口速率等于0说明txn.combine_key是第一次出现. 然后再去完成 txn.combine_key 值的累计.
    http-request sc-inc-gpc1(0) if is_post { var(txn._combine_key),table_gpc0_rate eq 0 }  # 对 group:aggregate_key 这个复合键如果是第一次出现, 那么在gpc1中对group的进行自增(UV的概念).
    http-request sc-inc-gpc0(0) if is_post ## 在 gpc0 中对 group 的进行累计(PV的概念)
    http-request sc-inc-gpc0(1) if is_post ## 对 track-sc1 中的 group:aggregate_key 在 gpc0 中进行计数(PV) 

    http-request set-var(txn.gpv)  var(txn._group),table_gpc0_rate
    http-request set-var(txn.uv)  var(txn._group),table_gpc1_rate
    http-request set-var(txn.pv) var(txn._combine_key),table_gpc0_rate

    http-request return status 200 content-type application/json lf-string '{"gpv":%[var(txn.gpv)],"pv":%[var(txn.pv)],"uv":%[var(txn.uv)],"gidle":%[var(txn.gidle)],"vidle":%[var(txn.vidle)],"group":"%[var(txn.group)]","v":"%[var(txn.v)]","ttl":%[var(txn.gttl)],"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]","timestamp":"%[date]","ip": "%[src]","port": %cp}' hdr Access-Control-Allow-Origin "*"


backend group_distinct_1h
    stick-table type binary len 16 size 1g expire 1h store gpc0,gpc0_rate(1h),gpc1,gpc1_rate(1h)   
    acl is_post method POST
    
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.
    # 定义变量
    http-request set-var(txn.group) url_param(group)  # group   --> group 
    # http-request set-var(txn.gttl)  str()
    http-request set-var(txn.v) url_param(distinct) unless { url_param(v) -m found } # distinct --> aggregate_key
    http-request set-var(txn.v) url_param(v) if { url_param(v) -m found }
    # http-request set-var-fmt(txn.combine_key) "%[var(txn.group)]%[var(txn.v)]"
    http-request set-var(txn.combine_key) var(txn.group),concat(':',txn.v,)  # 避免 v 为空值或者不传入分组待观测值时导致 combine_key 和 key 一样，进而重复计数.  # 避免 v 为空值或者不传入分组待观测值时导致 combine_key 和 key 一样，进而重复计数.
    # str(1),digest(md5),hex  #  str(),concat(<ip=,sess.ip,>),concat(<dn=,sess.dn,>)
    http-request set-var(txn._combine_key) var(txn.combine_key),digest(md5)
    http-request set-var(txn._group) var(txn.group),digest(md5)
    http-request set-var(txn._v) var(txn.v),digest(md5)

    http-request set-var(txn.gttl)  var(txn._group),table_expire
    http-request set-var(txn.gttl)  int(0) unless { var(txn.gttl) -m found }   ## 如果前面没有设置 txn.gttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.gidle) var(txn._group),table_idle
    http-request set-var(txn.gidle) int(0) unless { var(txn.gidle) -m found }  ## 如果前面没有设置 txn.gttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.vidle) var(txn._combine_key),table_idle
    http-request set-var(txn.vidle) int(0) unless { var(txn.vidle) -m found }
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 

    http-request track-sc0 var(txn._group)  if is_post  # track-scx 会刷新 idle 和 ttl 的值.
    http-request track-sc1 var(txn._combine_key)  if is_post  # track-scx 会刷新 idle 和 ttl 的值.
    # 先取出 table 中 txn.combine_key 的速率, 如果最近窗口速率等于0说明txn.combine_key是第一次出现. 然后再去完成 txn.combine_key 值的累计.
    http-request sc-inc-gpc1(0) if is_post { var(txn._combine_key),table_gpc0_rate eq 0 }  # 对 group:aggregate_key 这个复合键如果是第一次出现, 那么在gpc1中对group的进行自增(UV的概念).
    http-request sc-inc-gpc0(0) if is_post ## 在 gpc0 中对 group 的进行累计(PV的概念)
    http-request sc-inc-gpc0(1) if is_post ## 对 track-sc1 中的 group:aggregate_key 在 gpc0 中进行计数(PV) 

    http-request set-var(txn.gpv)  var(txn._group),table_gpc0_rate
    http-request set-var(txn.uv)  var(txn._group),table_gpc1_rate
    http-request set-var(txn.pv) var(txn._combine_key),table_gpc0_rate

    http-request return status 200 content-type application/json lf-string '{"gpv":%[var(txn.gpv)],"pv":%[var(txn.pv)],"uv":%[var(txn.uv)],"gidle":%[var(txn.gidle)],"vidle":%[var(txn.vidle)],"group":"%[var(txn.group)]","v":"%[var(txn.v)]","ttl":%[var(txn.gttl)],"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]","timestamp":"%[date]","ip": "%[src]","port": %cp}' hdr Access-Control-Allow-Origin "*"


backend group_distinct_1d
    stick-table type binary len 16 size 1g expire 1d store gpc0,gpc0_rate(1d),gpc1,gpc1_rate(1d)
    acl is_post method POST
    
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.
    # 定义变量
    http-request set-var(txn.group) url_param(group)  # group   --> group 
    http-request set-var(txn.v) url_param(distinct) unless { url_param(v) -m found } # distinct --> aggregate_key
    http-request set-var(txn.v) url_param(v) if { url_param(v) -m found }  # distinct --> aggregate_key
    # http-request set-var-fmt(txn.combine_key) "%[var(txn.group)]%[var(txn.v)]"
    http-request set-var(txn.combine_key) var(txn.group),concat(':',txn.v,)  # 避免 v 为空值或者不传入分组待观测值时导致 combine_key 和 key 一样，进而重复计数.
    # str(1),digest(md5),hex  #  str(),concat(<ip=,sess.ip,>),concat(<dn=,sess.dn,>)
    http-request set-var(txn._combine_key) var(txn.combine_key),digest(md5)
    http-request set-var(txn._group) var(txn.group),digest(md5)
    http-request set-var(txn._v) var(txn.v),digest(md5)

    http-request set-var(txn.gttl)  var(txn._group),table_expire
    http-request set-var(txn.gttl)  int(0) unless { var(txn.gttl) -m found }   ## 如果前面没有设置 txn.gttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.gidle) var(txn._group),table_idle
    http-request set-var(txn.gidle) int(0) unless { var(txn.gidle) -m found }  ## 如果前面没有设置 txn.gttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.vidle) var(txn._combine_key),table_idle
    http-request set-var(txn.vidle) int(0) unless { var(txn.vidle) -m found }
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 

    http-request track-sc0 var(txn._group)  if is_post  # track-scx 会刷新 idle 和 ttl 的值.
    http-request track-sc1 var(txn._combine_key)  if is_post  # track-scx 会刷新 idle 和 ttl 的值.
    # 先取出 table 中 txn.combine_key 的速率, 如果最近窗口速率等于0说明txn.combine_key是第一次出现. 然后再去完成 txn.combine_key 值的累计.
    http-request sc-inc-gpc1(0) if is_post { var(txn._combine_key),table_gpc0_rate eq 0 }  # 对 group:aggregate_key 这个复合键如果是第一次出现, 那么在gpc1中对group的进行自增(UV的概念).
    http-request sc-inc-gpc0(0) if is_post ## 在 gpc0 中对 group 的进行累计(PV的概念)
    http-request sc-inc-gpc0(1) if is_post ## 对 track-sc1 中的 group:aggregate_key 在 gpc0 中进行计数(PV) 

    http-request set-var(txn.gpv)  var(txn._group),table_gpc0_rate
    http-request set-var(txn.uv)  var(txn._group),table_gpc1_rate
    http-request set-var(txn.pv) var(txn._combine_key),table_gpc0_rate

    http-request return status 200 content-type application/json lf-string '{"gpv":%[var(txn.gpv)],"pv":%[var(txn.pv)],"uv":%[var(txn.uv)],"gidle":%[var(txn.gidle)],"vidle":%[var(txn.vidle)],"group":"%[var(txn.group)]","v":"%[var(txn.v)]","ttl":%[var(txn.gttl)],"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]","timestamp":"%[date]","ip": "%[src]","port": %cp}' hdr Access-Control-Allow-Origin "*"


backend group_distinct_7d
    stick-table type binary len 16 size 1g expire 7d store gpc0,gpc0_rate(7d),gpc1,gpc1_rate(7d)
    acl is_post method POST
    
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.
    # 定义变量
    http-request set-var(txn.group) url_param(group)  # group   --> group 
    http-request set-var(txn.v) url_param(distinct) unless { url_param(v) -m found } # distinct --> aggregate_key
    http-request set-var(txn.v) url_param(v) if { url_param(v) -m found }  # distinct --> aggregate_key
    # http-request set-var-fmt(txn.combine_key) "%[var(txn.group)]%[var(txn.v)]"
    http-request set-var(txn.combine_key) var(txn.group),concat(':',txn.v,)  # 避免 v 为空值或者不传入分组待观测值时导致 combine_key 和 key 一样，进而重复计数.
    # str(1),digest(md5),hex  #  str(),concat(<ip=,sess.ip,>),concat(<dn=,sess.dn,>)
    http-request set-var(txn._combine_key) var(txn.combine_key),digest(md5)
    http-request set-var(txn._group) var(txn.group),digest(md5)
    http-request set-var(txn._v) var(txn.v),digest(md5)

    http-request set-var(txn.gttl)  var(txn._group),table_expire
    http-request set-var(txn.gttl)  int(0) unless { var(txn.gttl) -m found }   ## 如果前面没有设置 txn.gttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.gidle) var(txn._group),table_idle
    http-request set-var(txn.gidle) int(0) unless { var(txn.gidle) -m found }  ## 如果前面没有设置 txn.gttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.vidle) var(txn._combine_key),table_idle
    http-request set-var(txn.vidle) int(0) unless { var(txn.vidle) -m found }
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 

    http-request track-sc0 var(txn._group)  if is_post  # track-scx 会刷新 idle 和 ttl 的值.
    http-request track-sc1 var(txn._combine_key)  if is_post  # track-scx 会刷新 idle 和 ttl 的值.
    # 先取出 table 中 txn.combine_key 的速率, 如果最近窗口速率等于0说明txn.combine_key是第一次出现. 然后再去完成 txn.combine_key 值的累计.
    http-request sc-inc-gpc1(0) if is_post { var(txn._combine_key),table_gpc0_rate eq 0 }  # 对 group:aggregate_key 这个复合键如果是第一次出现, 那么在gpc1中对group的进行自增(UV的概念).
    http-request sc-inc-gpc0(0) if is_post ## 在 gpc0 中对 group 的进行累计(PV的概念)
    http-request sc-inc-gpc0(1) if is_post ## 对 track-sc1 中的 group:aggregate_key 在 gpc0 中进行计数(PV) 

    http-request set-var(txn.gpv)  var(txn._group),table_gpc0_rate
    http-request set-var(txn.uv)  var(txn._group),table_gpc1_rate
    http-request set-var(txn.pv) var(txn._combine_key),table_gpc0_rate

    http-request return status 200 content-type application/json lf-string '{"gpv":%[var(txn.gpv)],"pv":%[var(txn.pv)],"uv":%[var(txn.uv)],"gidle":%[var(txn.gidle)],"vidle":%[var(txn.vidle)],"group":"%[var(txn.group)]","v":"%[var(txn.v)]","ttl":%[var(txn.gttl)],"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]","timestamp":"%[date]","ip": "%[src]","port": %cp}' hdr Access-Control-Allow-Origin "*"


