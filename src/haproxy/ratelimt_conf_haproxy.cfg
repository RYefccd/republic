global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend fe_api
    bind :80
    use_backend rate_10s   if { path /rate_10s }  #### \{ 与 path 之间要空格, uri 与 \} 之间也要保空格
    use_backend rate_1m    if { path /rate_1m  }
    use_backend rate_1h    if { path /rate_1h  }
    use_backend rate_1h_bak   if { path /rate_1h_bak  }

    use_backend group_agg_1m  if { path /group_agg_1m }
    default_backend default_be

backend default_be
    http-request return status 200 content-type application/json lf-string '{"ip": "%[src]","port": %cp,"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]", "timestamp":"%[date]"}'

backend rate_10s
    stick-table  type string  size 1m  expire 30s  store gpc0,gpc0_rate(10s),gpc1,gpc1_rate(10s)
    # 在取值之前对 mykey 进行非空判断
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.
    http-request set-var(txn.keyttl) url_param(mykey),table_expire
    http-request set-var(txn.keyttl) int(0) unless { var(txn.keyttl) -m found }   ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.keyidle) url_param(mykey),table_idle
    http-request set-var(txn.keyidle) int(0) unless { var(txn.keyidle) -m found }  ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    # stick-table  type string  size 1m  expire 30s  store gpc0,gpc0_rate(10s),gpc1,gpc1_rate(10s)
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 
    http-request track-sc0 url_param(mykey)  ### if mykey 非空
    http-request sc-inc-gpc0(0) ### if mykey 非空
    http-request set-var(txn.counter) url_param(mykey),table_gpc0
    http-request set-var(txn.counter) int(0) unless { var(txn.counter) -m found }
    http-request set-var(txn.rate) url_param(mykey),table_gpc0_rate
    http-request set-var(txn.rate) int(0) unless { var(txn.rate) -m found }
    http-request return status 200 content-type application/json lf-string '{"ip": "%[src]","port": %cp,"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]", "timestamp":"%[date]","mykey":"%[url_param(mykey)]","ttl":%[var(txn.keyttl)],"idle":%[var(txn.keyidle)],"counter":%[var(txn.counter)],"rate":%[var(txn.rate)]}'

backend rate_1m
    stick-table  type string  size 1m  expire 3m  store gpc0,gpc0_rate(1m),gpc1,gpc1_rate(1m)
    # 在取值之前对 mykey 进行非空判断
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.
    http-request set-var(txn.keyttl) url_param(mykey),table_expire
    http-request set-var(txn.keyttl) int(0) unless { var(txn.keyttl) -m found }   ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.keyidle) url_param(mykey),table_idle
    http-request set-var(txn.keyidle) int(0) unless { var(txn.keyidle) -m found }  ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 
    http-request track-sc0 url_param(mykey)  ### if mykey 非空
    http-request sc-inc-gpc0(0) ### if mykey 非空
    http-request set-var(txn.counter) url_param(mykey),table_gpc0
    http-request set-var(txn.counter) int(0) unless { var(txn.counter) -m found }
    http-request set-var(txn.rate) url_param(mykey),table_gpc0_rate
    http-request set-var(txn.rate) int(0) unless { var(txn.rate) -m found }
    http-request return status 200 content-type application/json lf-string '{"ip": "%[src]","port": %cp,"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]", "timestamp":"%[date]","mykey":"%[url_param(mykey)]","ttl":%[var(txn.keyttl)],"idle":%[var(txn.keyidle)],"counter":%[var(txn.counter)],"rate":%[var(txn.rate)]}'

backend rate_1h
    stick-table  type string  size 1m  expire 3h  store gpc0,gpc0_rate(1h),gpc1,gpc1_rate(1m)
    # 在取值之前对 mykey 进行非空判断
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.
    http-request set-var(txn.keyttl) url_param(mykey),table_expire
    http-request set-var(txn.keyttl) int(0) unless { var(txn.keyttl) -m found }   ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.keyidle) url_param(mykey),table_idle
    http-request set-var(txn.keyidle) int(0) unless { var(txn.keyidle) -m found }  ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 
    http-request track-sc0 url_param(mykey)  ### if mykey 非空
    http-request sc-inc-gpc0(0) ### if mykey 非空
    http-request set-var(txn.counter) url_param(mykey),table_gpc0
    http-request set-var(txn.counter) int(0) unless { var(txn.counter) -m found }
    http-request set-var(txn.rate) url_param(mykey),table_gpc0_rate
    http-request set-var(txn.rate) int(0) unless { var(txn.rate) -m found }
    http-request return status 200 content-type application/json lf-string '{"ip": "%[src]","port": %cp,"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]", "timestamp":"%[date]","mykey":"%[url_param(mykey)]","ttl":%[var(txn.keyttl)],"idle":%[var(txn.keyidle)],"counter":%[var(txn.counter)],"rate":%[var(txn.rate)]}'


## 使用外部 stick table 的示例.(在一个backend中使用多个 stick table, 其他stick table 可以在另外的backend中去定义)
backend rate_1h_bak
    #default_backend be_api
    # 在取值之前对 mykey 进行非空判断
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.
    http-request set-var(txn.keyttl) url_param(mykey),table_expire(rate_1ht)
    http-request set-var(txn.keyttl) int(0) unless { var(txn.keyttl) -m found }   ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.keyidle) url_param(mykey),table_idle(rate_1ht)
    http-request set-var(txn.keyidle) int(0) unless { var(txn.keyidle) -m found }  ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.

    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个. 
    http-request track-sc0 url_param(mykey) table rate_1ht
    http-request sc-inc-gpc0(0) ### if  { url_param(mykey) -m found } ### { url_param(mykey) test }

    http-request set-var(txn.counter) url_param(mykey),table_gpc0(rate_1ht)
    http-request set-var(txn.counter) int(0) unless { var(txn.counter) -m found }
    http-request set-var(txn.rate)    url_param(mykey),table_gpc0_rate(rate_1ht)
    http-request set-var(txn.rate) int(0) unless { var(txn.rate) -m found }

    http-request return status 200 content-type application/json lf-string '{"ip": "%[src]","port": %cp,"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]", "timestamp":"%[date]","mykey":"%[url_param(mykey)]","ttl":%[var(txn.keyttl)],"idle":%[var(txn.keyidle)],"counter":%[var(txn.counter)],"rate":%[var(txn.rate)]}'
    # http-request return status 200 content-type application/json lf-string '{"ip": "%[src]","port": %cp,"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]", "timestamp":"%[date]","mykey":"%[url_param(mykey)]","ttl":%[var(txn.keyttl)],"idle":%[var(txn.keyidle)],"counter":%[url_param(mykey),table_gpc0(rate_1ht)],"rate":%[url_param(mykey),table_gpc0_rate(rate_1ht)]}'


backend rate_1ht
    ### stick-table type ip size 1m expire 10s store http_req_rate(10s)
    # If just storing rates, then the expire argument should match the longest rate period;
    # that way the counters will be reset to 0 at the same time that the period ends.
    stick-table  type string  size 1m  expire 3h  store gpc0,gpc0_rate(1h),gpc1,gpc1_rate(1m)


backend group_agg_1m
    stick-table  type string  size 1m  expire 3m  store gpc0,gpc0_rate(1m),gpc1,gpc1_rate(1m)
    # 在取值之前对 mykey 进行非空判断
    # 在 sc-inc-gpc0 之前获取 ttl(expire) 和 idle 信息.
    # # g_key --> group_key  agg_key --> aggregate_key
    # 定义变量
    http-request set-var(txn.g_key) url_param(group_key)  # g_key   --> group_key
    http-request set-var(txn.agg_key) url_param(agg_key)  # agg_key --> aggregate_key
    http-request set-var-fmt(txn.combine_key) "%[var(txn.g_key)]:%[var(txn.agg_key)]"

    http-request set-var(txn.keyttl)  var(txn.g_key),table_expire
    http-request set-var(txn.keyttl)  int(0) unless { var(txn.keyttl) -m found }   ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    http-request set-var(txn.keyidle) var(txn.g_key),table_idle
    http-request set-var(txn.keyidle) int(0) unless { var(txn.keyidle) -m found }  ## 如果前面没有设置 txn.keyttl table 中没有这个记录, 是第一次出现, 这里进行初始化.
    # 在 sc-inc-gpc0 之后, table key 的 ttl 和 idle 时间会重置.
    #  track-scX 和 sc-inc-gpc0(X) 里面的 X 是 sc0, sc1, sc2 中的一个.
    # http-request track-sc0 var(txn.g_key)
    http-request track-sc0 var(txn.g_key)
    # http-request track-sc0 var(txn.combine_key)
    http-request track-sc1 var(txn.combine_key)
    # 先取出 table 中 txn.combine_key 的速率, 如果最近窗口速率等于0说明txn.combine_key是第一次出现. 然后再去完成 txn.combine_key 值的累计.
    http-request sc-inc-gpc1(0) if { var(txn.combine_key),table_gpc0_rate eq 0 }  # 对 group_key:aggregate_key 这个复合键如果是第一次出现, 那么在gpc1中对group_key的进行自增(UV的概念).
    http-request sc-inc-gpc0(0)  ## 在 gpc0 中对 group_key 的进行累计(PV的概念)
    http-request sc-inc-gpc0(1)  ## 对 track-sc1 中的 group_key:aggregate_key 在 gpc0 中进行计数(PV)

    http-request set-var(txn.g_key_pv)       var(txn.g_key),table_gpc0
    http-request set-var(txn.g_key_pv_rate)  var(txn.g_key),table_gpc0_rate
    http-request set-var(txn.g_key_uv)       var(txn.g_key),table_gpc1
    http-request set-var(txn.g_key_uv_rate)  var(txn.g_key),table_gpc1_rate
    http-request set-var(txn.combine_key_pv) var(txn.combine_key),table_gpc0
    http-request set-var(txn.combine_key_pv_rate) var(txn.combine_key),table_gpc0_rate

    http-request return status 200 content-type application/json lf-string '{"ip": "%[src]","port": %cp,"date":"%[date,utime(%Y-%m-%dT%H:%M:%S%z)]", "timestamp":"%[date]","mykey":"%[url_param(mykey)]","ttl":%[var(txn.keyttl)],"idle":%[var(txn.keyidle)],"g_key_pv":%[var(txn.g_key_pv)],"g_key_pv_rate":"%[var(txn.g_key_pv_rate)]","g_key_uv":"%[var(txn.g_key_uv)]","g_key_uv_rate":"%[var(txn.g_key_uv_rate)]","combine_key_pv":"%[var(txn.combine_key_pv)]","combine_key_pv_rate":"%[var(txn.combine_key_pv_rate)]"}'
